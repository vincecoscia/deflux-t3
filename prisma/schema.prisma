// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  executions    Execution[]
  trades        Trade[]
  studies       Study[]
  tags          Tag[]
  images        Image[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Execution {
  id            String   @id @default(cuid())
  platform      String   @default("TD Ameritrade")
  symbol        String
  side          String
  quantity      Int
  price         Float
  commission    Float
  return        Float?
  percentClosed Float?   @default(0)
  dateTime      DateTime
  timestamp     DateTime @default(now())
  userId        String   @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  tradeId       String?  @default("None")
  trade         Trade?   @relation(fields: [tradeId], references: [id])

  @@unique([userId, id])
  @@index([userId])
  @@index([tradeId])
}

model Study {
  id          String       @id
  name        String
  startDate   DateTime
  endDate     DateTime
  description String
  userId      String       @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  trades      StudyTrade[]

  @@index([userId])
}

model StudyTrade {
  id        String   @id
  studyId   String   @unique
  tradeId   String   @unique
  study     Study    @relation(fields: [studyId], references: [id])
  trade     Trade    @relation(fields: [tradeId], references: [id])
  createdAt DateTime @default(now())

  @@index([studyId])
  @@index([tradeId])
  @@unique([studyId, tradeId], name: "studyTradeIdentifier")
}

model Trade {
  id              String       @id @default(cuid())
  platform        String       @default("TD Ameritrade")
  symbol          String
  balance         Float?
  grossProfit     Float
  netProfit       Float
  totalCommission Float
  winLoss         String
  side            String
  openPrice       Float
  closePrice      Float
  dateOpened      DateTime
  dateClosed      DateTime
  notes           String?       @db.VarChar(500) @default("")
  tradeTags       TradeTag[]
  executions      Execution[]
  studies         StudyTrade[]
  screenshots     Image[]
  userId          String       @default(cuid())
  user            User         @relation(fields: [userId], references: [id])
  dateCreated     DateTime     @default(now())

  @@index([userId])
}

model Tag {
  id        String     @id @default(cuid())
  name      String
  color     String?    @default("#18B4B7")
  userId    String     @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  tradeTags TradeTag[]

  @@index([userId])
  @@unique([name, userId], name: "tagIdentifier")
}

model TradeTag {
  id      String @id @default(cuid())
  tradeId String
  trade   Trade  @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  tagId   String
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([tradeId])
  @@index([tagId])
  @@unique([tradeId, tagId], name: "tradeTagIdentifier")
}

model Image {
  id        String   @id @default(cuid())
  caption   String?
  tradeId   String?
  trade     Trade?   @relation(fields: [tradeId], references: [id])
  timestamp DateTime @default(now())
  userId    String   @default(cuid())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tradeId])
}
